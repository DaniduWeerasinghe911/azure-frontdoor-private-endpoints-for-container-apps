//Deploy Front Door Premium

targetScope =  'subscription'

@description('Resource Group Name')
param rgName string = 'fdoor-rg'

@description('Resource Locations')
param location string = 'australiaeast'

@description('Environment ShortName')
param envShortName string = 'dev'

@description('Environment domain name')
param domainName string = 'dev.dckloud.com'

@description('AAD Environment Domain Name')
param azure_b2c_url string = 'aad.dev.dckloud.com'

@description('The name of the existing Front Door/CDN Profile.')
param profileName string = 'fdoor-dckloud'

@description('Endpoints to deploy to Front Door.')
@metadata(
  {
    doclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/afdendpoints?pivots=deployment-language-bicep'
    example: [
      {
        name: 'myendpoint' // name of endpoint
        enabledState: 'Enabled' // Optional. Enabled state of endpoint. 'Enabled' or 'Disabled'
        autoGeneratedDomainNameLabelScope: 'TenantReuse' // Optional. Indicates the endpoint name reuse scope. The default value is TenantReuse.
      }
    ]
  }
)
param endpoints array

@description('Origin Groups to deploy to Front Door.')
@metadata({
  doclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/origingroups?pivots=deployment-language-bicep'
  example: {
    name: 'myOriginGroup'
    loadBalancingSettings: { // Optional. Load balancing settings for a backend pool
      sampleSize: 5
      successfulSamplesRequired: 3
      additionalLatencyInMilliseconds: 240
    }
    healthProbeSettings: { // Optional. Health probe settings to the origin that is used to determine the health of the origin param.
      probePath: '/'
      probeRequestType: 'HEAD'
      probeProtocol: 'Http'
      probeIntervalInSeconds: '240'
    }
    sessionAffinityState: 'Enabled' // Optional. Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
  }
})
param originGroups array

@description('Origins to deploy to Front Door.')
@metadata({
  docclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/origingroups/origins?pivots=deployment-language-bicep'
  example: {
    enabledState: true // Optional.
    originGroupName: 'myOriginGroup' // Name must match with the origin group name configured as part of origin groups param.
    originName: 'origin1'
    hostName: 'hostname.com.au'
    httpPort: '80' // Optional.
    httpsPort: '443' // Optional.
    originHostHeader: 'string' // Optional.
    enforceCertificateNameCheck: true // Optional.
    priority: '1' // Optional.
    weight: '1000' // Optional.
    sharedPrivateLinkResource: { // Optional.
      privateLink: {
        id: 'privateLinkResourceId'
      }
      privateLinkLocation: 'location'
      status: 'Approved'
      requestMessage: 'Please approve this request to allow Front Door to access the container app'
    }
  }
})
param origins array

@description('Optional. Secrets to deploy to Front Door. Required if customer certificates are used to secure endpoints.')
@metadata({
  doclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/secrets?pivots=deployment-language-bicep'
  example: {
    secretName: 'secret1'
    parameters: {
      type: 'CustomerCertificate'
      certificateSecretId: 'secret resource id to secret in key vault containing certificate'
    }
  }
})
param secrets array = []

@description('Optional. Custom domains to deploy to Front Door.')
@metadata({
  doclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/customdomains?pivots=deployment-language-bicep'
  example: {
    customDomainName: 'myCustomDomain'
    hostName: 'host.com.au'
    dnsZoneId: 'resource id of DNS Zone'
    tlsSettings: {
      certificateType: 'ManagedCertificate'
      minimumTlsVersion: 'TLS12'
    }
  }
})
param customDomains array = []

@description('Routes to deploy to Front Door.')
@metadata({
  doclink: 'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/afdendpoints/routes?pivots=deployment-language-bicep'
  example: {
    routeName: 'route1'
    endpointName: 'myendpoint' // Name must match with the endpoint name configured as part of endpoints param.
    originGroupName: 'myOriginGroup' // Name must match with the origin group name configured as part of origin groups param.
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [
      '/*'
    ]
    forwardingProtocol: 'HttpsOnly'
    customDomains: [ 'myCustomDomain' ] // Name must match with the custom domain name configured as part of customDomains  param.
    ruleSets: [ 'ruleSet1' ] // Name must match with the ruleSet name configured as part of ruleSets.
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
  }
})
param routes array

@description('Optional. RuleSets to deploy to Front Door.')
@metadata({
  doclink: [
    'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/rulesets?pivots=deployment-language-bicep'
    'https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/rulesets/rules?pivots=deployment-language-bicep'
  ]
  example: {
    ruleSetName: 'MaintenancePageRuleSet'
    rules: [
      {
        ruleName: 'MaintenancePageRedirectForExternal'
        actions: [
          {
            name: 'UrlRedirect'
            parameters: {
              redirectType: 'TemporaryRedirect'
              typeName: 'DeliveryRuleUrlRedirectActionParameters'
              destinationProtocol: 'Https'
            }
          }
        ]
        conditions: [
          {
            name: 'RemoteAddress'
            parameters: {
              operator: 'IPMatch'
              typeName: 'DeliveryRuleRemoteAddressConditionParameters'
              negateCondition: false
              matchValues: [
                '200.1.1.1'
              ]
              transforms: []
            }
          }
        ]
        matchProcessingBehavior: 'Stop'
        order: 10
      }
    ]
  }
})
param ruleSets array = []

@description('Optional. Security Policies to deploy to Front Door.')
@metadata({
  example: {
    name: 'securityPolicy1'
    firewallPolicyId: 'resource id to Front Door WAF Policy'
    endpoints: [ 'myendpoint' ] // Names must match with the endpoint name configured as part of endpoints param.
    customDomains: [ 'myCustomDomain' ] // Name(s) must match with the custom domain name configured as part of customDomains param.
  }
})
param securityPolicies array = []

param now string = string((dateTimeToEpoch(utcNow('u'))))

// Constructed json files
//Origins
var originsUpdated =json(replace(replace(string(origins),'<envShortName>',envShortName),'azure_b2c_url',azure_b2c_url))

//Custom Domains
var customDomainsUpdated =json(replace(string(customDomains),'<domain>',domainName))


resource rg 'Microsoft.Resources/resourceGroups@2022-09-01' existing = {
  name: rgName
}

module fdEndpoints '../modules/front-door/profile-endpoints.bicep' = {
  scope: rg
  name: 'deploy_frontdoor_endpoints'
  params: {
    endpoints: endpoints
    originGroups: originGroups
    origins: originsUpdated
    profileName: profileName
    routes: routes
    secrets:secrets
    customDomains:customDomainsUpdated
    ruleSets:ruleSets
  }
}

